#!/usr/bin/python

import httplib2
from apiclient import errors
from apiclient.discovery import build
from oauth2client.client import OAuth2WebServerFlow
import pickle
from ipalib import api
from pprint import pprint

#api.bootstrap(debug=False, log_mgr=None)
api.bootstrap_with_global_options(context='cli')
api.finalize()
api.Backend.xmlclient.connect()

# Create an httplib2.Http object and authorize it with our credentials
try:
  credentials = pickle.load(open('.credentials'))
except:
  CLIENT_ID = 'GOOGLE_CLIENT_ID'
  CLIENT_SECRET = 'GOOGLE_OATH2_SECRET'
  OAUTH_SCOPE = 'https://www.googleapis.com/auth/admin.directory.user'
  REDIRECT_URI = 'urn:ietf:wg:oauth:2.0:oob'

  flow = OAuth2WebServerFlow(CLIENT_ID, CLIENT_SECRET, OAUTH_SCOPE, REDIRECT_URI)
  authorize_url = flow.step1_get_authorize_url()
  print 'Go to the following link in your browser: ' + authorize_url
  code = raw_input('Enter verification code: ').strip()
  credentials = flow.step2_exchange(code)
  pickle.dump(credentials, open('.credentials', 'w'))

http = httplib2.Http()
http = credentials.authorize(http)

directory_service = build('admin', 'directory_v1', http=http)

all_users = []
page_token = None
params = {'customer': 'my_customer'}

while True:
  try:
    if page_token:
      param['pageToken'] = page_token
    current_page = directory_service.users().list(**params).execute()

    all_users.extend(current_page['users'])
    page_token = current_page.get('nextPageToken')
    if not page_token:
      break
  except errors.HttpError as error:
    print 'An error occurred: %s' % error
    break

for user in all_users:

  ipa_user = None

  r = api.Command.user_find( mail = unicode(user['primaryEmail']), all = True )
  if r['count'] < 1:
    print "User not found", user['primaryEmail']
    
  else:
    ipa_user = r['result'][0]
  
    user['phones'] = []
    if (ipa_user.has_key('telephonenumber')):
      user['phones'].append( { 'type' : 'work', 'value' : ipa_user['telephonenumber'][0] } )
    if (ipa_user.has_key('mobile')):
      user['phones'].append( { 'type' : 'mobile', 'value' : ipa_user['mobile'][0] } )
    if (ipa_user.has_key('pager')):
      user['phones'].append( { 'type' : 'pager', 'value' : ipa_user['pager'][0] } )
  
  
    user['addresses'] = []
    if (ipa_user.has_key('street')):
      user['addresses'].append( { 'type' : 'work', 'customType': '', 'primary' : True,
                                  'formatted' : '%s\n%s, %s %s' % (ipa_user['street'][0], ipa_user['l'][0], ipa_user['st'][0], ipa_user['postalcode'][0] ),
                                  'streetAddress' : ipa_user['street'][0], 'locality' : ipa_user['l'][0], 'region' : ipa_user['st'][0], 'postalCode' : ipa_user['postalcode'][0]
                                }, )
  
    user['externalIds'] = [
      { 'type' : 'custom', 'customType' : 'ipauniqueid', 'value' : ipa_user['ipauniqueid'][0] },
      { 'type' : 'custom', 'customType' : 'uid', 'value' : ipa_user['uid'][0] },
      { 'type' : 'custom', 'customType' : 'uidnumber', 'value' : ipa_user['uidnumber'][0] },
      ]
  
    print 'User updated', user['primaryEmail']
  
    directory_service.users().update( userKey=user['primaryEmail'], body=user ).execute()

